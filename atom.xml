<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[superdry.github.com]]></title>
  <link href="http://superdry.github.com/atom.xml" rel="self"/>
  <link href="http://superdry.github.com/"/>
  <updated>2012-08-12T21:52:20+09:00</updated>
  <id>http://superdry.github.com/</id>
  <author>
    <name><![CDATA[Superdry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tab APIを使ったAndroidサンプルアプリ(1)]]></title>
    <link href="http://superdry.github.com/blog/2012/08/12/tab-api-sample-apps-for-android/"/>
    <updated>2012-08-12T20:59:00+09:00</updated>
    <id>http://superdry.github.com/blog/2012/08/12/tab-api-sample-apps-for-android</id>
    <content type="html"><![CDATA[<p>今回はAndroid用のサンプルアプリケーションを紹介しようと思います。開発作業の基本的な流れはWEBやiPhoneアプリケーションと変わりませんので、<a href="http://jyukon.blogspot.jp/2012/08/tab-api.html">tab APIの紹介エントリ</a>も合わせて見てください。</p>

<h2>STEP1 アプリケーションを登録してクライアントIDを取る</h2>

<p>基本的には、<a href="http://jyukon.blogspot.jp/2012/08/tab-apiios.html">iOSの場合</a>とほぼ同じように<a href="https://tab.do/clients">tabの開発者用サイト</a>から入手してください。</p>

<h2>STEP2 アプリケーションを開発する</h2>

<p>大まかな流れは<a href="https://github.com/tonchidot/tab-samples/tree/master/oauth2/android">README</a>に書いてあるのでそちらを見てください。</p>

<h3>開発環境を準備する</h3>

<p>まずは、Androidの開発環境を準備してください。開発環境の準備方法は、<a href="http://developer.android.com/sdk/installing/index.html">Androidの公式サイト</a>を参照してください。</p>

<p>また、Android用のサンプルアプリケーションをGithubで公開しています。これをダウンロードし、Eclipseでプロジェクトフォルダをインポートしてください。具体的には、Eclipseのメニューバーより、[File] - [New] - [Other] - [Android Project from Existing Code] を選択し、</p>

<blockquote><p>&lt;&lt;ダウンロードフォルダ>>/oauth/android/SampleApp</p></blockquote>

<p>を指定します。</p>

<p>{% img http://superdry.github.com/images/post/20120812/1.png %}</p>

<p>最後に、OAuthのライブラリをダウンロードします。このサンプルアプリケーションでは、leelooのライブラリを使用します。</p>

<p>leelooのサイトからOAuthのライブラリをダウンロードします。今回使用するjarファイルは以下の4つになります。</p>

<ul>
<li>jettison-1.2.jar</li>
<li>oauth2-client.jar</li>
<li>oauth2-common-0.1.jar</li>
<li>slf4j-api.1.6.1.jar</li>
</ul>


<p>この4つのjarファイルを入手したら、libsフォルダの下にこれらjarファイルをコピーします。</p>

<h3>サンプルアプリケーションのカスタマイズ</h3>

<p>まずは、CommonConst.javaに、入手したクライアントID等を埋め込みます。</p>

<p>{% gist 3329873 CommonConst.java</p>

<p>L19〜L21にそれぞれ入手したクライアントID、クライアントシークレット、コールバックURIに置き換えます。コールバックURIはデフォルトのままだと&#8221;tab://callback/oauth2&#8221;になります。もしここで独自のURIスキーマを設定した場合は、AndroidManifest.xmlも修正します。</p>

<p>{% gist 3329873 AndroidManifest.xml %}</p>

<p>L43行目のIntent filterのandroid:schemaの設定を変更します。</p>

<p>これでアプリケーションのカスタマイズは終了です。ビルドののちエミュレータまたは実機で起動してください。</p>

<h2>STEP3 アプリケーションを起動する</h2>

<p>アプリケーションを起動すると、OAuth認証というボタンが表示されます。</p>

<p>{% img http://superdry.github.com/images/post/20120812/2.png %}</p>

<p>ボタンをクリックすると、ブラウザでtabの認可画面が開きます。</p>

<p>{% img http://superdry.github.com/images/post/20120812/3.png %}</p>

<p>「許可する」をタップします。すると、アプリに戻り、認証コードの取得、アクセストークンの取得処理が始まり、認証後プロフィール情報が取得できます。（このサンプルアプリケーションでは<a href="http://tonchidot.github.com/tab-api-docs/api/user/get_my_information.html">ログインしているユーザ自身の情報を取得</a>します。）</p>

<p>{% img http://superdry.github.com/images/post/20120812/4.png %}</p>

<p>次回は、サンプルアプリケーションの認証の実装部分についてご紹介します。</p>
]]></content>
  </entry>
  
</feed>
