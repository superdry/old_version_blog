<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[superdry.github.com]]></title>
  <link href="http://superdry.github.com/atom.xml" rel="self"/>
  <link href="http://superdry.github.com/"/>
  <updated>2012-08-12T22:56:19+09:00</updated>
  <id>http://superdry.github.com/</id>
  <author>
    <name><![CDATA[Superdry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tab APIを使ったAndroidサンプルアプリ(2)]]></title>
    <link href="http://superdry.github.com/blog/2012/08/12/tab-api-sample-apps-for-android-2/"/>
    <updated>2012-08-12T22:35:00+09:00</updated>
    <id>http://superdry.github.com/blog/2012/08/12/tab-api-sample-apps-for-android-2</id>
    <content type="html"><![CDATA[<p><a href="http://superdry.github.com/blog/2012/08/12/tab-api-sample-apps-for-android/">前回のエントリ</a>の続きです。今回は<a href="https://github.com/tonchidot/tab-samples/tree/master/oauth2/android">Androidサンプルアプリケーション</a>の詳細について説明します。</p>

<h2>OAuthの認可コードの取得</h2>

<p>tabの認証系・更新系APIを使うためにはアクセストークンが必要ですが、その前にまず、アクセストークンを取得するための認可コードの発行が必要です。これはGetAccessTokenActivity.javaのgetAuthorizationCode内で実装しています。</p>

<div><script src='https://gist.github.com/3329873.js?file=GetAccessTokenActivity1.java'></script>
<noscript><pre><code>private final OnClickListener getAuthorizationCode = new View.OnClickListener() {

  @Override
  public void onClick(View v) {

    // 認可コードの取得
    OAuthClientRequest request = null;
    try {
      request = OAuthClientRequest
          .authorizationLocation(
              CommonConst.AUTHORIZATION_LOCATION)
          .setResponseType(&quot;code&quot;)
          .setClientId(CommonConst.CLIENT_ID)
          .setRedirectURI(CommonConst.REDIRECT_URI)
          .buildQueryMessage();
    } catch (OAuthSystemException e) {
      e.printStackTrace();
    }

    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(request
        .getLocationUri()));
    startActivity(intent);
  }
};</code></pre></noscript></div>


<p>認可コードの取得のUriを組み立て（L9〜L15）、Uriをブラウザに対し暗黙的インテントを投げています（L20〜22）。ブラウザに表示されるtabの認可画面で許可すると、ブラウザからコールバックURL宛にインテントを返します。これをGetAccessTokenActivity.javaで受け取り、GetAccessTokenActivity.javaのgetAccessToken内で認可コードを取得しています。</p>

<div><script src='https://gist.github.com/3329873.js?file=GetAccessTokenActivity2.java'></script>
<noscript><pre><code>private void getAccessToken(Intent intent) {
  Uri uri = intent.getData();

  if (uri != null &amp;&amp; uri.toString().startsWith(CommonConst.REDIRECT_URI)) {

    // エラーチェック
    String error = uri.getQueryParameter(&quot;error&quot;);
    if (error != null) {
      // 中略
    } else {

      // 認可コードの取得
      String code = uri.getQueryParameter(&quot;code&quot;);
      GetAccessTokenTask task = new GetAccessTokenTask(this, code);
      task.execute();
    }
  }
}</code></pre></noscript></div>


<p>ここで、認可コードを取得し（L13）、アクセストークンの取得処理（L14〜L15）が実行されます。</p>

<h2>アクセストークンの取得</h2>

<p>アクセストークンの取得は、GetAccessTokenTask.javaのdoInBackground内で実装しています。</p>

<div><script src='https://gist.github.com/3329873.js?file=GetAccessTokenTask.java'></script>
<noscript><pre><code>  @Override
  protected Void doInBackground(Void... arg0) {
    OAuthClientRequest request = null;
    OAuthJSONAccessTokenResponse response = null;

    try {
      request = OAuthClientRequest
          .tokenLocation(CommonConst.TOKEN_LOCATION)
          .setGrantType(GrantType.AUTHORIZATION_CODE)
          .setClientId(CommonConst.CLIENT_ID)
          .setClientSecret(CommonConst.CLIENT_SECRET)
          .setRedirectURI(CommonConst.REDIRECT_URI)
          .setCode(mCode).buildBodyMessage();

      OAuthClient oAuthClient = new OAuthClient(new URLConnectionClient());

      response = oAuthClient.accessToken(request);
    } catch (OAuthSystemException e) {
      e.printStackTrace();
    } catch (OAuthProblemException e) {
      e.printStackTrace();
    }

    if (response != null) {
      SharedPreferences pref = mContext.getSharedPreferences(CommonConst.PREF_NAME,
          Context.MODE_PRIVATE);
      SharedPreferences.Editor editor = pref.edit();
      editor.putString(CommonConst.PREF_ACCESS_TOKEN, response.getAccessToken());
      editor.putString(CommonConst.PREF_REFRESH_TOKEN, response.getRefreshToken());
      editor.putString(CommonConst.PREF_EXPIRES_IN, response.getExpiresIn());
      editor.putString(CommonConst.PREF_TOKEN_TYPE, response.getParam(&quot;token_type&quot;));
      editor.apply();
    }

    return null;
  }</code></pre></noscript></div>


<p>OAuthClientRequestを組み立て（L7〜L13）、アクセストークンを再取得（L16）しています。</p>

<p>なお、このサンプルアプリケーションでは取得したアクセストークンはSharedPreferencesに保存しています（L24〜L31）。セキュリティが気になる人はここでトークンを暗号化して保存するとなおよいでしょう。SharedPreferencesに保存されたアクセストークンをつかって、tabの認証系・更新系APIにアクセスすることができます。</p>

<h2>リフレッシュトークンによるアクセストークンの再取得</h2>

<p>アクセストークンには期限があるため、期限切れの場合はAPIアクセスのタイミングで401（Unauthorized）を返します。その場合は、以前アクセストークンを取得したときについてきたリフレッシュトークンを使い、アクセストークンを再取得する必要があります。</p>

<p>サンプルアプリケーションでは、RefreshTokenTask.javaのdoInBackground内で実装しています。</p>

<div><script src='https://gist.github.com/3329873.js?file=RefreshTokenTask.java'></script>
<noscript><pre><code>@Override
protected Void doInBackground(Void... arg0) {
  OAuthClientRequest request = null;
  OAuthJSONAccessTokenResponse response = null;

  try {
    request = OAuthClientRequest
        .tokenLocation(CommonConst.TOKEN_LOCATION)
        .setGrantType(GrantType.REFRESH_TOKEN)
        .setClientId(CommonConst.CLIENT_ID)
        .setClientSecret(CommonConst.CLIENT_SECRET)
        .setRefreshToken(mToken).buildBodyMessage();

    OAuthClient oAuthClient = new OAuthClient(new URLConnectionClient());

    response = oAuthClient.accessToken(request);
  } catch (OAuthSystemException e) {
    e.printStackTrace();
  } catch (OAuthProblemException e) {
    e.printStackTrace();
  }

  if (response != null) {
    SharedPreferences pref = mContext.getSharedPreferences(CommonConst.PREF_NAME,
        Context.MODE_PRIVATE);
    SharedPreferences.Editor editor = pref.edit();
    editor.putString(CommonConst.PREF_ACCESS_TOKEN, response.getAccessToken());
    editor.putString(CommonConst.PREF_REFRESH_TOKEN, response.getRefreshToken());
    editor.putString(CommonConst.PREF_EXPIRES_IN, response.getExpiresIn());
    editor.putString(CommonConst.PREF_TOKEN_TYPE, response.getParam(&quot;token_type&quot;));
    editor.apply();
  }

  return null;
}</code></pre></noscript></div>


<p>アクセストークンと同じように、OAuthClientRequestを組み立て（L7〜L13）、アクセストークンを再取得（L16）しています。違うのはOAuthClientRequestを組み立て方のみです。取得した情報は、これも同様に、SharedPreferencesに上書き保存しています（L24〜L31）。</p>

<h2>まとめ</h2>

<p>以上で、tab APIを使ったAndroidサンプルアプリケーションの説明は終わります。現時点で、tab APIを使っているアプリは<a href="http://jyukon.blogspot.jp/2012/08/tab-api_7.html">こちら</a>で紹介しています。今後もいろいろなAPIを充実させていく予定ですので、ぜひ使ってみてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tab APIを使ったAndroidサンプルアプリ(1)]]></title>
    <link href="http://superdry.github.com/blog/2012/08/12/tab-api-sample-apps-for-android/"/>
    <updated>2012-08-12T20:59:00+09:00</updated>
    <id>http://superdry.github.com/blog/2012/08/12/tab-api-sample-apps-for-android</id>
    <content type="html"><![CDATA[<p>今回はAndroid用のサンプルアプリケーションを紹介しようと思います。開発作業の基本的な流れはWEBやiPhoneアプリケーションと変わりませんので、<a href="http://jyukon.blogspot.jp/2012/08/tab-api.html">tab APIの紹介エントリ</a>も合わせて見てください。</p>

<h2>STEP1 アプリケーションを登録してクライアントIDを取る</h2>

<p>基本的には、<a href="http://jyukon.blogspot.jp/2012/08/tab-apiios.html">iOSの場合</a>とほぼ同じように<a href="https://tab.do/clients">tabの開発者用サイト</a>から入手してください。</p>

<h2>STEP2 アプリケーションを開発する</h2>

<p>大まかな流れは<a href="https://github.com/tonchidot/tab-samples/tree/master/oauth2/android">README</a>に書いてあるのでそちらを見てください。</p>

<h3>開発環境を準備する</h3>

<p>まずは、Androidの開発環境を準備してください。開発環境の準備方法は、<a href="http://developer.android.com/sdk/installing/index.html">Androidの公式サイト</a>を参照してください。</p>

<p>また、Android用のサンプルアプリケーションをGithubで公開しています。これをダウンロードし、Eclipseでプロジェクトフォルダをインポートしてください。具体的には、Eclipseのメニューバーより、[File] - [New] - [Other] - [Android Project from Existing Code] を選択し、</p>

<blockquote><p>&lt;&lt;ダウンロードフォルダ>>/oauth/android/SampleApp</p></blockquote>

<p>を指定します。</p>

<p><img src="http://superdry.github.com/images/post/20120812/1.png"></p>

<p>最後に、OAuthのライブラリをダウンロードします。このサンプルアプリケーションでは、leelooのライブラリを使用します。</p>

<p>leelooのサイトからOAuthのライブラリをダウンロードします。今回使用するjarファイルは以下の4つになります。</p>

<ul>
<li>jettison-1.2.jar</li>
<li>oauth2-client.jar</li>
<li>oauth2-common-0.1.jar</li>
<li>slf4j-api.1.6.1.jar</li>
</ul>


<p>この4つのjarファイルを入手したら、libsフォルダの下にこれらjarファイルをコピーします。</p>

<h3>サンプルアプリケーションのカスタマイズ</h3>

<p>まずは、CommonConst.javaに、入手したクライアントID等を埋め込みます。</p>

<div><script src='https://gist.github.com/3329873.js?file=CommonConst.java'></script>
<noscript><pre><code>package com.tonchidot.tab.sample.oauth;

import android.os.Build;

public final class CommonConst {

    public static final String TAG = &quot;tabsamle&quot;;

    public static final String PREF_NAME = &quot;tab&quot;;
    public static final String PREF_ACCESS_TOKEN = &quot;access_token&quot;;
    public static final String PREF_REFRESH_TOKEN = &quot;refresh_token&quot;;
    public static final String PREF_EXPIRES_IN = &quot;expires_in&quot;;
    public static final String PREF_TOKEN_TYPE = &quot;token_type&quot;;

    public final static String AUTHORIZATION_LOCATION = &quot;https://tab.do/oauth2/authorize&quot;;
    public final static String TOKEN_LOCATION = &quot;https://tab.do/api/1/oauth2/token&quot;;
    public static final String ACCESS_URI = &quot;https://tab.do/api/1/users/me.json&quot;;

    public final static String CLIENT_ID = &quot;&lt;&lt;Your Client ID&gt;&gt;&quot;;
    public final static String CLIENT_SECRET = &quot;&lt;&lt;Your Client Secret&gt;&gt;&quot;;
    public final static String REDIRECT_URI = &quot;&lt;&lt;Your Redirect Uri&gt;&gt;&quot;;

    public static boolean isHoneycomb() {
        return Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB;
    }

}
</code></pre></noscript></div>


<p>L19〜L21にそれぞれ入手したクライアントID、クライアントシークレット、コールバックURIに置き換えます。コールバックURIはデフォルトのままだと&#8221;tab://callback/oauth2&#8221;になります。もしここで独自のURIスキーマを設定した場合は、AndroidManifest.xmlも修正します。</p>

<div><script src='https://gist.github.com/3329873.js?file=AndroidManifest.xml'></script>
<noscript><pre><code>&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.tonchidot.tab.sample.oauth&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot; &gt;

    &lt;uses-sdk
        android:minSdkVersion=&quot;10&quot;
        android:targetSdkVersion=&quot;15&quot; /&gt;

    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;

    &lt;application
        android:icon=&quot;@drawable/ic_launcher&quot;
        android:label=&quot;@string/app_name&quot;
        android:theme=&quot;@style/AppTheme&quot; &gt;
        &lt;activity
            android:name=&quot;.MainActivity&quot;
            android:label=&quot;@string/title_activity_main&quot;
            android:screenOrientation=&quot;portrait&quot; &gt;
            &lt;meta-data
                android:name=&quot;android.support.PARENT_ACTIVITY&quot;
                android:value=&quot;android.support.v4.app.FragmentActivity&quot; /&gt;

            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
        &lt;activity
            android:name=&quot;.GetAccessTokenActivity&quot;
            android:exported=&quot;true&quot;
            android:label=&quot;@string/title_activity_get_accesstoken&quot;
            android:screenOrientation=&quot;portrait&quot; &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;
                &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;

                &lt;data
                    android:host=&quot;callback&quot;
                    android:scheme=&quot;tab&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;</code></pre></noscript></div>


<p>L43行目のIntent filterのandroid:schemaの設定を変更します。</p>

<p>これでアプリケーションのカスタマイズは終了です。ビルドののちエミュレータまたは実機で起動してください。</p>

<h2>STEP3 アプリケーションを起動する</h2>

<p>アプリケーションを起動すると、OAuth認証というボタンが表示されます。</p>

<p><img src="http://superdry.github.com/images/post/20120812/2.png"></p>

<p>ボタンをクリックすると、ブラウザでtabの認可画面が開きます。</p>

<p><img src="http://superdry.github.com/images/post/20120812/3.png"></p>

<p>「許可する」をタップします。すると、アプリに戻り、認証コードの取得、アクセストークンの取得処理が始まり、認証後プロフィール情報が取得できます。（このサンプルアプリケーションでは<a href="http://tonchidot.github.com/tab-api-docs/api/user/get_my_information.html">ログインしているユーザ自身の情報を取得</a>します。）</p>

<p><img src="http://superdry.github.com/images/post/20120812/4.png"></p>

<p>次回は、サンプルアプリケーションの認証の実装部分についてご紹介します。</p>
]]></content>
  </entry>
  
</feed>
